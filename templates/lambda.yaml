AWSTemplateFormatVersion: 2010-09-09

Parameters:
  BucketName:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3Key:
    Type: String

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:  !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: custom
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'

  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled fetching of messages
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Id: lambda
          Arn: !GetAtt LambdaFunction.Arn

  AppInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleRule.Arn
